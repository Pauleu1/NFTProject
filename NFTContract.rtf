{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pub contract NFTCollectContract \{\
	pub resource NFT \{\
		pub let id: UInt64\
			init(initID: UInt64) \{\
		    		self.id = initID\
			\}\
	\}\
    \
\
	pub resource interface NFTReceiver \{\
    		pub fun deposit(token: @NFT, metadata: \{String : String\})\
    		pub fun getIDs(): [UInt64]\
    		pub fun idExists(id: UInt64): Bool\
    		pub fun getMetadata(id: UInt64) : \{String : String\}\
    	\}\
\
    	pub resource Collection: NFTReceiver \{\
        	pub var ownedNFTs: @\{UInt64: NFT\}\
        	pub var metadataObjs: \{UInt64: \{ String : String \}\}\
\
        	init () \{\
            		self.ownedNFTs <- \{\}\
            		self.metadataObjs = \{\}\
        	\}\
\
	pub fun withdraw(withdrawID: UInt64): @NFT \{\
        	let token <- self.ownedNFTs.remove(key: withdrawID)!\
\
            	return <-token\
       \}\
\
       pub fun deposit(token: @NFT, metadata: \{String : String\}) \{\
       		self.metadataObjs[token.id] = metadata\
           self.ownedNFTs[token.id] <-! token\
       \}\
\
       pub fun idExists(id: UInt64): Bool \{\
           return self.ownedNFTs[id] != nil\
       \}\
\
       pub fun getIDs(): [UInt64] \{\
           return self.ownedNFTs.keys\
       \}\
\
       pub fun updateMetadata(id: UInt64, metadata: \{String: String\}) \{\
           self.metadataObjs[id] = metadata\
       \}\
\
       pub fun getMetadata(id: UInt64): \{String : String\} \{\
           return self.metadataObjs[id]!\
       \}\
\
       destroy() \{\
           destroy self.ownedNFTs\
       \}\
    \}\
	\
       pub fun createEmptyCollection(): @Collection \{\
       return <- create Collection()\
    \}\
\
       pub resource NFTMinter \{\
       		pub var idCount: UInt64\
\
        	init() \{\
            	self.idCount = 1\
        	\}\
\
       pub fun mintNFT(): @NFT \{\
       		var newNFT <- create NFT(initID: self.idCount)\
\
            	self.idCount = self.idCount + 1 as UInt64\
\
            	return <-newNFT\
       \} \
       \} \
\
	init() \{\
        	self.account.save(<-self.createEmptyCollection(), to: /storage/NFTCollection)\
        	self.account.link<&\{NFTReceiver\}>(/public/NFTReceiver, target: /storage/NFTCollection)\
        	self.account.save(<-create NFTMinter(), to: /storage/NFTMinter)\
    	\} \
\}\
}